package com.neusoft.dao.impl;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;

import com.neusoft.dao.ConsumerDao;
import com.neusoft.entity.*;
import com.neusoft.dao.DaoException;
import com.neusoft.dao.DaoFactory;
import com.neusoft.utils.ConnectionFactory;

public class ConsumerDaoImpl implements ConsumerDao{

   /**
    * 会员
    *  添加*/
	QueryRunner qr = new QueryRunner();

	public int insert(Consumer con) throws DaoException {
		// TODO Auto-generated method stub
		//获取连接
		Connection conn=ConnectionFactory.getInstance().getConnection();
    //准备语句
   String sql="insert into account_consumer(loginname,password)value(?,?)";
			try {
				return qr.update(conn,sql,con.getLoginname(),con.getPassword());		
			}catch(SQLException e) {
				e.printStackTrace();
				throw new  DaoException("添加出错",e);
			}finally {
				DbUtils.closeQuietly(conn);
			}	
}

	/**
	 * 删除id
	 */


	public int deleteConsumer(Integer id) throws DaoException {

		//获取连接
		Connection conn=ConnectionFactory.getInstance().getConnection();
       //准备语句
          String sql="delete from account_consumer where id=?";
          try {
        	  
  			return qr.update(conn,sql,id);		
  		}catch(SQLException e) {
  			e.printStackTrace();
  			throw new  DaoException("删除出错",e);
  		}finally {
  			DbUtils.closeQuietly(conn);
  		}
	}

	/*
	 * 修改id
	 */
	public static void main(String[] args) {
		Consumer dd=new Consumer(4,"dfkjd");
		int t=new ConsumerDaoImpl().updateConsumer2(dd);
		System.out.println(t);
	}
	public int updateConsumer(Consumer ucon) throws DaoException {
		//获取连接
		Connection conn=ConnectionFactory.getInstance().getConnection();
       //准备语句
		String sql="update account_consumer set loginname=? where id=? ";
	     try {
	    	 return qr.update(conn,sql,ucon.getLoginname(),ucon.getId());
	     }catch(SQLException e) {
	  			e.printStackTrace();
	  			throw new  DaoException("修改出错",e);
	  		}finally {
	  			DbUtils.closeQuietly(conn);
	  		}
	}
     
	

	
	/*
	 * 查询所有
	 */

	public List<Consumer> getConsumerList() throws DaoException {
		// TODO Auto-generated method stub
		       //获取连接
				Connection conn=ConnectionFactory.getInstance().getConnection();
		       //准备语句
				String sql="select id,loginname,password,registertime,lastlogintime,ip from account_consumer ";
				System.out.println(sql);
				List<Consumer> list=new  ArrayList<Consumer>();
				
			     try {
					    ResultSetHandler<List<Consumer>> rsh = new BeanListHandler<Consumer>(Consumer.class);
					     list = qr.query(conn, sql,rsh);
					   
			     }catch(SQLException e) {
			  			e.printStackTrace();
			  			throw new  DaoException("查询出错",e);
			  		}finally {
			  			DbUtils.closeQuietly(conn);
			  		}
			     return list;
	}

	
	
	
	 /*
	  * 分页查询
	  */
	
	
	
	public PageModel<Consumer> getCatesByPage(int pageNo, int pageSize) {
		// TODO Auto-generated method stub
		
			PageModel<Consumer>  model=null;
			
			//获取连接
			Connection conn=ConnectionFactory.getInstance().getConnection();
					
			 //sql
			String totalcount_sql="select count(id) from account_consumer";
			//查询总的记录  ScalarHandler:第一行第一列的值
			ResultSetHandler<Long> rsh=new ScalarHandler<Long>();
			try {
				Integer totalcount=qr.query(conn, totalcount_sql, rsh).intValue();
				
				if(totalcount>0) {
					model=new PageModel<Consumer>();
					model.setTotalcount(totalcount);
					//分页查询
					String sql="select id,loginname,password,registertime,lastlogintime,ip from account_consumer order by id desc limit ?,?";
				    Object[] params= {(pageNo-1)*pageSize,pageSize};
					List<Consumer> msgs=qr.query(conn, sql, new BeanListHandler<Consumer>(Consumer.class), params);
				 
					model.setDatas(msgs);
				   }
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				throw new DaoException("分页查询出错。。。",e);
			}finally {
				DbUtils.closeQuietly(conn);
			}
			return model;
	}
	
  /*
   * 修改
   */
	@Override
	public int updateConsumer(ConsumerDao ucon) throws DaoException {
		// TODO Auto-generated method stub
		return 0;
	}

  @Override
   public int insert(ConsumerDao con) throws DaoException {
	// TODO Auto-generated method stub
	 return 0;
 }

	
	
}
